{
  env: {
    env_type: gym_minigrid,
    env_task: MiniGrid-Empty-Random-6x6-v0,
    action_size: 3,
    rgb_image: true,
    tile_size: 4,
  },

  generator: {
    state_encoder_type: sequence,
    ttransformations: [cnn_encoder, flatten, mlp, reshape, cnn_decoder, sigmoid],
    ttransformations: [noise, mlp, reshape, sigmoid],
    transformations: [noise, reshape, cnn_decoder, tanh],
    cnn_encoder: {
      state_encoder_type: cnn_encoder,
      n_channels: [8, 16, 16],
      kernel_sizes: [4, 3, 3],
      strides: [4, 1, 1],
      paddings: [0, 1, 1],
      pre_permute: [0, 3, 1, 2],
      unit_norm: True,
      activation_type: relu
    },
    flatten: {
      state_encoder_type: flatten,
    },
    noise: {
      state_encoder_type: noise_vec,
      vec_size: 108,
    },
    mlp: {
      state_encoder_type: mlp_encoder,
      hidden_layers_sizes: [256, 512, 1024, 784],
      activation_type: relu
    },
    reshape: {
      state_encoder_type: reshape,
      shape: [3, 6, 6],
    }
    cnn_decoder: {
      state_encoder_type: cnn_encoder,
      conv_type: decode,
      n_channels: [64, 32, 16, 3],
      kernel_sizes: [4, 4, 3, 3],
      strides: [2, 2, 1, 1],
      paddings: [1, 1, 1, 1],
      batch_norm: [1, 1, 1, 0]
      post_permute: [0, 2, 3, 1],
      last_layer_activation: False,
      activation_type: relu
    },
    sigmoid: {
      state_encoder_type: sigmoid,
    },
    tanh: {
      state_encoder_type: sigmoid,
    }
  },

  discriminator: {
    state_encoder_type: sequence,
    transformations: [choose, cnn_encoder, flatten, mlp, sigmoid],
    ttransformations: [choose, flatten, mlp, sigmoid],
    choose: {
      state_encoder_type: dict_choose,
      key: next_state,
    }
    concat: {
      state_encoder_type: concat,
      dim: -1,
    },
    cnn_encoder: {
      state_encoder_type: cnn_encoder,
      n_channels: [4, 8, 8],
      kernel_sizes: [4, 3, 3],
      strides: [4, 1, 1],
      paddings: [0, 1, 1],
      batch_norm: [0, 1, 1]
      pre_permute: [0, 3, 1, 2],
      unit_norm: True,
      activation_type: leaky_relu
    },
    flatten: {
      state_encoder_type: flatten,
    }
    mlp: {
      state_encoder_type: mlp_encoder,
      hidden_layers_sizes: [16, 1],
      dropout: [0.3, 0],
      batch_norm: [1, 0]
      activation_type: leaky_relu
      last_layer_activation: False,
      unit_norm: True,
    },
    sigmoid: {
      state_encoder_type: sigmoid,
    },
  },

  training: {
    agent: random,
    agent_steps: 2,
    generator_lr: 0.0002,
    discriminator_lr: 0.0002,
    max_grad_norm: 0.1,
    disc_update_n: 1,
    n_steps: 1000000,
    n_processes: 16,
    batch_size: 64,
    verbose: 10,
    device: cpu,
    pool_size: 1000,
  },

  seed: 42,

  outputs: {
    model: ../artifacts/minigrid/models/minigrid_gan_random_agent.p,
    logs: ../artifacts/minigrid/logs/minigrid_gan_random_agent
  }
}
